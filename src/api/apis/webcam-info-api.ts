/* tslint:disable */
/* eslint-disable */
/**
 * Open Data Hub Tourism Api
 * Open Data Hub Tourism Api based on .Net Core with PostgreSQL
 *
 * OpenAPI spec version: v1
 * Contact: help@opendatahub.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, ORIGIN, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { WebcamInfo } from '../models';
import { WebcamInfoJsonResult } from '../models';
/**
 * WebcamInfoApi - axios parameter creator
 * @export
 */
export const WebcamInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Webcam Single
         * @param {string} id ID of the Webcam
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleWebcamInfo: async (id: string, language?: string, fields?: Array<string>, removenullvalues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling singleWebcamInfo.');
            }
            const localVarPath = `/v1/WebcamInfo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarQueryParameter['origin'] = ORIGIN;
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields;
            }

            if (removenullvalues !== undefined) {
                localVarQueryParameter['removenullvalues'] = removenullvalues;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Webcam List
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {number} [pagenumber] Pagenumber
         * @param {number} [pagesize] Elements per Page (default:10)
         * @param {string} [source] Source Filter (Separator &#x27;,&#x27; available sources &#x27;lts&#x27;,&#x27;content&#x27;), (default:&#x27;null&#x27;)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Gastronomy IDs), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active data, &#x27;false&#x27; only Disabled data), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODH Active (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published data, &#x27;false&#x27; only not published data), (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter FLOAT Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Geosorting-and-Locationfilter-usage#geosorting-functionality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [longitude] GeoFilter FLOAT Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Geosorting-and-Locationfilter-usage#geosorting-functionality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [radius] Radius INTEGER to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Geosorting-and-Locationfilter-usage#geosorting-functionality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [updatefrom] Returns data changed after this date Format (yyyy-MM-dd), (default: &#x27;null&#x27;)
         * @param {string} [publishedon] Published On Filter (Separator &#x27;,&#x27; List of publisher IDs), (default:&#x27;null&#x27;)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)&lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#searchfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki searchfilter&lt;/a&gt;
         * @param {string} [rawfilter] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawfilter&lt;/a&gt;
         * @param {string} [rawsort] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawsort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawsort&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WebcamInfoGet: async (language?: string, pagenumber?: number, pagesize?: number, source?: string, idlist?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, updatefrom?: string, publishedon?: string, fields?: Array<string>, searchfilter?: string, rawfilter?: string, rawsort?: string, removenullvalues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/WebcamInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarQueryParameter['origin'] = ORIGIN;
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (idlist !== undefined) {
                localVarQueryParameter['idlist'] = idlist;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (updatefrom !== undefined) {
                localVarQueryParameter['updatefrom'] = updatefrom;
            }

            if (publishedon !== undefined) {
                localVarQueryParameter['publishedon'] = publishedon;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields;
            }

            if (searchfilter !== undefined) {
                localVarQueryParameter['searchfilter'] = searchfilter;
            }

            if (rawfilter !== undefined) {
                localVarQueryParameter['rawfilter'] = rawfilter;
            }

            if (rawsort !== undefined) {
                localVarQueryParameter['rawsort'] = rawsort;
            }

            if (removenullvalues !== undefined) {
                localVarQueryParameter['removenullvalues'] = removenullvalues;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebcamInfoApi - functional programming interface
 * @export
 */
export const WebcamInfoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Webcam Single
         * @param {string} id ID of the Webcam
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleWebcamInfo(id: string, language?: string, fields?: Array<string>, removenullvalues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<WebcamInfo>>> {
            const localVarAxiosArgs = await WebcamInfoApiAxiosParamCreator(configuration).singleWebcamInfo(id, language, fields, removenullvalues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Webcam List
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {number} [pagenumber] Pagenumber
         * @param {number} [pagesize] Elements per Page (default:10)
         * @param {string} [source] Source Filter (Separator &#x27;,&#x27; available sources &#x27;lts&#x27;,&#x27;content&#x27;), (default:&#x27;null&#x27;)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Gastronomy IDs), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active data, &#x27;false&#x27; only Disabled data), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODH Active (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published data, &#x27;false&#x27; only not published data), (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter FLOAT Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Geosorting-and-Locationfilter-usage#geosorting-functionality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [longitude] GeoFilter FLOAT Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Geosorting-and-Locationfilter-usage#geosorting-functionality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [radius] Radius INTEGER to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Geosorting-and-Locationfilter-usage#geosorting-functionality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [updatefrom] Returns data changed after this date Format (yyyy-MM-dd), (default: &#x27;null&#x27;)
         * @param {string} [publishedon] Published On Filter (Separator &#x27;,&#x27; List of publisher IDs), (default:&#x27;null&#x27;)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)&lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#searchfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki searchfilter&lt;/a&gt;
         * @param {string} [rawfilter] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawfilter&lt;/a&gt;
         * @param {string} [rawsort] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawsort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawsort&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WebcamInfoGet(language?: string, pagenumber?: number, pagesize?: number, source?: string, idlist?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, updatefrom?: string, publishedon?: string, fields?: Array<string>, searchfilter?: string, rawfilter?: string, rawsort?: string, removenullvalues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<WebcamInfoJsonResult>>> {
            const localVarAxiosArgs = await WebcamInfoApiAxiosParamCreator(configuration).v1WebcamInfoGet(language, pagenumber, pagesize, source, idlist, active, odhactive, seed, latitude, longitude, radius, updatefrom, publishedon, fields, searchfilter, rawfilter, rawsort, removenullvalues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WebcamInfoApi - factory interface
 * @export
 */
export const WebcamInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary GET Webcam Single
         * @param {string} id ID of the Webcam
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleWebcamInfo(id: string, language?: string, fields?: Array<string>, removenullvalues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<WebcamInfo>> {
            return WebcamInfoApiFp(configuration).singleWebcamInfo(id, language, fields, removenullvalues, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Webcam List
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {number} [pagenumber] Pagenumber
         * @param {number} [pagesize] Elements per Page (default:10)
         * @param {string} [source] Source Filter (Separator &#x27;,&#x27; available sources &#x27;lts&#x27;,&#x27;content&#x27;), (default:&#x27;null&#x27;)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Gastronomy IDs), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active data, &#x27;false&#x27; only Disabled data), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODH Active (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published data, &#x27;false&#x27; only not published data), (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter FLOAT Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Geosorting-and-Locationfilter-usage#geosorting-functionality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [longitude] GeoFilter FLOAT Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Geosorting-and-Locationfilter-usage#geosorting-functionality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [radius] Radius INTEGER to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Geosorting-and-Locationfilter-usage#geosorting-functionality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [updatefrom] Returns data changed after this date Format (yyyy-MM-dd), (default: &#x27;null&#x27;)
         * @param {string} [publishedon] Published On Filter (Separator &#x27;,&#x27; List of publisher IDs), (default:&#x27;null&#x27;)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)&lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#searchfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki searchfilter&lt;/a&gt;
         * @param {string} [rawfilter] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawfilter&lt;/a&gt;
         * @param {string} [rawsort] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawsort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawsort&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WebcamInfoGet(language?: string, pagenumber?: number, pagesize?: number, source?: string, idlist?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, updatefrom?: string, publishedon?: string, fields?: Array<string>, searchfilter?: string, rawfilter?: string, rawsort?: string, removenullvalues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<WebcamInfoJsonResult>> {
            return WebcamInfoApiFp(configuration).v1WebcamInfoGet(language, pagenumber, pagesize, source, idlist, active, odhactive, seed, latitude, longitude, radius, updatefrom, publishedon, fields, searchfilter, rawfilter, rawsort, removenullvalues, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebcamInfoApi - object-oriented interface
 * @export
 * @class WebcamInfoApi
 * @extends {BaseAPI}
 */
export class WebcamInfoApi extends BaseAPI {
    /**
     * 
     * @summary GET Webcam Single
     * @param {string} id ID of the Webcam
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
     * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebcamInfoApi
     */
    public async singleWebcamInfo(id: string, language?: string, fields?: Array<string>, removenullvalues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<WebcamInfo>> {
        return WebcamInfoApiFp(this.configuration).singleWebcamInfo(id, language, fields, removenullvalues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Webcam List
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {number} [pagenumber] Pagenumber
     * @param {number} [pagesize] Elements per Page (default:10)
     * @param {string} [source] Source Filter (Separator &#x27;,&#x27; available sources &#x27;lts&#x27;,&#x27;content&#x27;), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Gastronomy IDs), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active data, &#x27;false&#x27; only Disabled data), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published data, &#x27;false&#x27; only not published data), (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter FLOAT Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Geosorting-and-Locationfilter-usage#geosorting-functionality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
     * @param {string} [longitude] GeoFilter FLOAT Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Geosorting-and-Locationfilter-usage#geosorting-functionality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
     * @param {string} [radius] Radius INTEGER to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Geosorting-and-Locationfilter-usage#geosorting-functionality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
     * @param {string} [updatefrom] Returns data changed after this date Format (yyyy-MM-dd), (default: &#x27;null&#x27;)
     * @param {string} [publishedon] Published On Filter (Separator &#x27;,&#x27; List of publisher IDs), (default:&#x27;null&#x27;)
     * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)&lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#searchfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki searchfilter&lt;/a&gt;
     * @param {string} [rawfilter] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawfilter&lt;/a&gt;
     * @param {string} [rawsort] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawsort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawsort&lt;/a&gt;
     * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebcamInfoApi
     */
    public async v1WebcamInfoGet(language?: string, pagenumber?: number, pagesize?: number, source?: string, idlist?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, updatefrom?: string, publishedon?: string, fields?: Array<string>, searchfilter?: string, rawfilter?: string, rawsort?: string, removenullvalues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<WebcamInfoJsonResult>> {
        return WebcamInfoApiFp(this.configuration).v1WebcamInfoGet(language, pagenumber, pagesize, source, idlist, active, odhactive, seed, latitude, longitude, radius, updatefrom, publishedon, fields, searchfilter, rawfilter, rawsort, removenullvalues, options).then((request) => request(this.axios, this.basePath));
    }
}
