/* tslint:disable */
/* eslint-disable */
/**
 * Open Data Hub Tourism Api
 * Open Data Hub Tourism Api based on .Net Core with PostgreSQL
 *
 * OpenAPI spec version: v1
 * Contact: help@opendatahub.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BezirksWeather } from '../models/bezirks-weather';
import { Measuringpoint } from '../models/measuringpoint';
import { SnowReportBaseData } from '../models/snow-report-base-data';
import { Weather } from '../models/weather';
import { WeatherRealTime } from '../models/weather-real-time';
/**
 * WeatherApi - axios parameter creator
 * @export
 */
export const WeatherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Measuringpoint SINGLE
         * @param {string} id Measuringpoint ID
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleMeasuringpoint: async (id: string, language?: string, fields?: Array<string>, removenullvalues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling singleMeasuringpoint.');
            }
            const localVarPath = `/v1/Weather/Measuringpoint/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields;
            }

            if (removenullvalues !== undefined) {
                localVarQueryParameter['removenullvalues'] = removenullvalues;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Snowreport Data LIVE Single
         * @param {string} id Skiarea ID
         * @param {string} [lang] Language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleSnowReport: async (id: string, lang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling singleSnowReport.');
            }
            const localVarPath = `/v1/Weather/SnowReport/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Current Suedtirol Weather LIVE Single
         * @param {string} id ID
         * @param {string} [language] Language
         * @param {string} [source] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleWeather: async (id: string, language?: string, source?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling singleWeather.');
            }
            const localVarPath = `/v1/Weather/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET District Weather LIVE
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [locfilter] Locfilter (possible values: filter by District 1 &#x3D; Etschtal/Überetsch/Unterland, 2 &#x3D; Burggrafenamt, 3 &#x3D; Vinschgau, 4 &#x3D; Eisacktal und Sarntal, 5 &#x3D; Wipptal, 6 &#x3D; Pustertal/Dolomiten, 7 &#x3D; Ladinien-Dolomiten | filter nearest DistrictWeather to Region,TV,Municipality,Fraction reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction))
         * @param {string} [language] Language
         * @param {string} [source] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleWeatherDistrict: async (pagenumber?: number, pagesize?: number, locfilter?: string, language?: string, source?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/Weather/District`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Suedtirol Weather HISTORY SINGLE
         * @param {string} id ID
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleWeatherHistory: async (id: string, language?: string, fields?: Array<string>, removenullvalues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling singleWeatherHistory.');
            }
            const localVarPath = `/v1/WeatherHistory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields;
            }

            if (removenullvalues !== undefined) {
                localVarQueryParameter['removenullvalues'] = removenullvalues;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Current Realtime Weather LIVE Single
         * @param {string} id id
         * @param {string} [language] Language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleWeatherRealtime: async (id: string, language?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling singleWeatherRealtime.');
            }
            const localVarPath = `/v1/Weather/Realtime/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET District Weather LIVE SINGLE
         * @param {string} id ID
         * @param {string} [language] Language
         * @param {string} [source] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WeatherDistrictIdGet: async (id: string, language?: string, source?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v1WeatherDistrictIdGet.');
            }
            const localVarPath = `/v1/Weather/District/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Current Suedtirol Weather LIVE
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [language] Language
         * @param {string} [locfilter] Locfilter (possible values: filter by StationData 1 &#x3D; Schlanders, 2 &#x3D; Meran, 3 &#x3D; Bozen, 4 &#x3D; Sterzing, 5 &#x3D; Brixen, 6 &#x3D; Bruneck | filter nearest Station to Region,TV,Municipality,Fraction reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;&#x27; &#x3D; No Filter). IF a Locfilter is set, only Stationdata is provided.
         * @param {boolean} [extended] 
         * @param {string} [source] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WeatherGet: async (pagenumber?: number, pagesize?: number, language?: string, locfilter?: string, extended?: boolean, source?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/Weather`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (extended !== undefined) {
                localVarQueryParameter['extended'] = extended;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Suedtirol Weather HISTORY
         * @param {number} [pagenumber] Pagenumber
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [language] Language
         * @param {string} [idlist] 
         * @param {string} [locfilter] 
         * @param {string} [datefrom] 
         * @param {string} [dateto] 
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] 
         * @param {string} [longitude] 
         * @param {string} [radius] 
         * @param {Array<string>} [fields] 
         * @param {string} [searchfilter] 
         * @param {string} [lastchange] 
         * @param {string} [rawfilter] 
         * @param {string} [rawsort] 
         * @param {boolean} [removenullvalues] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WeatherHistoryGet: async (pagenumber?: number, pagesize?: number, language?: string, idlist?: string, locfilter?: string, datefrom?: string, dateto?: string, seed?: string, latitude?: string, longitude?: string, radius?: string, fields?: Array<string>, searchfilter?: string, lastchange?: string, rawfilter?: string, rawsort?: string, removenullvalues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/WeatherHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (idlist !== undefined) {
                localVarQueryParameter['idlist'] = idlist;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (datefrom !== undefined) {
                localVarQueryParameter['datefrom'] = datefrom;
            }

            if (dateto !== undefined) {
                localVarQueryParameter['dateto'] = dateto;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields;
            }

            if (searchfilter !== undefined) {
                localVarQueryParameter['searchfilter'] = searchfilter;
            }

            if (lastchange !== undefined) {
                localVarQueryParameter['lastchange'] = lastchange;
            }

            if (rawfilter !== undefined) {
                localVarQueryParameter['rawfilter'] = rawfilter;
            }

            if (rawsort !== undefined) {
                localVarQueryParameter['rawsort'] = rawsort;
            }

            if (removenullvalues !== undefined) {
                localVarQueryParameter['removenullvalues'] = removenullvalues;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Measuringpoint LIST
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Gastronomy IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; (No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] Area ID (multiple IDs possible, separated by \&quot;,\&quot;)
         * @param {string} [skiareafilter] Skiarea ID
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [source] 
         * @param {boolean} [active] Active Filter (possible Values: &#x27;true&#x27; only Active Measuringpoints, &#x27;false&#x27; only Disabled Measuringpoints), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODH Active Filter Measuringpoints Filter (possible Values: &#x27;true&#x27; only published Measuringpoints, &#x27;false&#x27; only not published Measuringpoints), (default:&#x27;null&#x27;)
         * @param {string} [publishedon] Published On Filter (Separator &#x27;,&#x27; List of publisher IDs), (default:&#x27;null&#x27;)
         * @param {string} [updatefrom] Returns data changed after this date Format (yyyy-MM-dd), (default: &#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter FLOAT Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [longitude] GeoFilter FLOAT Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [radius] Radius INTEGER to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#searchfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki searchfilter&lt;/a&gt;
         * @param {string} [rawfilter] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawfilter&lt;/a&gt;
         * @param {string} [rawsort] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawsort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawsort&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WeatherMeasuringpointGet: async (pagenumber?: number, pagesize?: number, idlist?: string, locfilter?: string, areafilter?: string, skiareafilter?: string, language?: string, source?: string, active?: boolean, odhactive?: boolean, publishedon?: string, updatefrom?: string, latitude?: string, longitude?: string, radius?: string, seed?: string, fields?: Array<string>, searchfilter?: string, rawfilter?: string, rawsort?: string, removenullvalues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/Weather/Measuringpoint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (idlist !== undefined) {
                localVarQueryParameter['idlist'] = idlist;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (areafilter !== undefined) {
                localVarQueryParameter['areafilter'] = areafilter;
            }

            if (skiareafilter !== undefined) {
                localVarQueryParameter['skiareafilter'] = skiareafilter;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (publishedon !== undefined) {
                localVarQueryParameter['publishedon'] = publishedon;
            }

            if (updatefrom !== undefined) {
                localVarQueryParameter['updatefrom'] = updatefrom;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields;
            }

            if (searchfilter !== undefined) {
                localVarQueryParameter['searchfilter'] = searchfilter;
            }

            if (rawfilter !== undefined) {
                localVarQueryParameter['rawfilter'] = rawfilter;
            }

            if (rawsort !== undefined) {
                localVarQueryParameter['rawsort'] = rawsort;
            }

            if (removenullvalues !== undefined) {
                localVarQueryParameter['removenullvalues'] = removenullvalues;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Current Realtime Weather LIVE
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [language] Language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WeatherRealtimeGet: async (pagenumber?: number, pagesize?: number, language?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/Weather/Realtime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Snowreport Data LIVE
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [skiareaid] Skiarea ID
         * @param {string} [lang] Language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WeatherSnowReportGet: async (pagenumber?: number, pagesize?: number, skiareaid?: string, lang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/Weather/SnowReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (skiareaid !== undefined) {
                localVarQueryParameter['skiareaid'] = skiareaid;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeatherApi - functional programming interface
 * @export
 */
export const WeatherApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Measuringpoint SINGLE
         * @param {string} id Measuringpoint ID
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleMeasuringpoint(id: string, language?: string, fields?: Array<string>, removenullvalues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Measuringpoint>>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).singleMeasuringpoint(id, language, fields, removenullvalues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Snowreport Data LIVE Single
         * @param {string} id Skiarea ID
         * @param {string} [lang] Language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleSnowReport(id: string, lang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SnowReportBaseData>>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).singleSnowReport(id, lang, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Current Suedtirol Weather LIVE Single
         * @param {string} id ID
         * @param {string} [language] Language
         * @param {string} [source] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleWeather(id: string, language?: string, source?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Weather>>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).singleWeather(id, language, source, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET District Weather LIVE
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [locfilter] Locfilter (possible values: filter by District 1 &#x3D; Etschtal/Überetsch/Unterland, 2 &#x3D; Burggrafenamt, 3 &#x3D; Vinschgau, 4 &#x3D; Eisacktal und Sarntal, 5 &#x3D; Wipptal, 6 &#x3D; Pustertal/Dolomiten, 7 &#x3D; Ladinien-Dolomiten | filter nearest DistrictWeather to Region,TV,Municipality,Fraction reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction))
         * @param {string} [language] Language
         * @param {string} [source] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleWeatherDistrict(pagenumber?: number, pagesize?: number, locfilter?: string, language?: string, source?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BezirksWeather>>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).singleWeatherDistrict(pagenumber, pagesize, locfilter, language, source, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Suedtirol Weather HISTORY SINGLE
         * @param {string} id ID
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleWeatherHistory(id: string, language?: string, fields?: Array<string>, removenullvalues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Measuringpoint>>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).singleWeatherHistory(id, language, fields, removenullvalues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Current Realtime Weather LIVE Single
         * @param {string} id id
         * @param {string} [language] Language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleWeatherRealtime(id: string, language?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<WeatherRealTime>>>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).singleWeatherRealtime(id, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET District Weather LIVE SINGLE
         * @param {string} id ID
         * @param {string} [language] Language
         * @param {string} [source] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WeatherDistrictIdGet(id: string, language?: string, source?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BezirksWeather>>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).v1WeatherDistrictIdGet(id, language, source, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Current Suedtirol Weather LIVE
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [language] Language
         * @param {string} [locfilter] Locfilter (possible values: filter by StationData 1 &#x3D; Schlanders, 2 &#x3D; Meran, 3 &#x3D; Bozen, 4 &#x3D; Sterzing, 5 &#x3D; Brixen, 6 &#x3D; Bruneck | filter nearest Station to Region,TV,Municipality,Fraction reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;&#x27; &#x3D; No Filter). IF a Locfilter is set, only Stationdata is provided.
         * @param {boolean} [extended] 
         * @param {string} [source] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WeatherGet(pagenumber?: number, pagesize?: number, language?: string, locfilter?: string, extended?: boolean, source?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Weather>>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).v1WeatherGet(pagenumber, pagesize, language, locfilter, extended, source, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Suedtirol Weather HISTORY
         * @param {number} [pagenumber] Pagenumber
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [language] Language
         * @param {string} [idlist] 
         * @param {string} [locfilter] 
         * @param {string} [datefrom] 
         * @param {string} [dateto] 
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] 
         * @param {string} [longitude] 
         * @param {string} [radius] 
         * @param {Array<string>} [fields] 
         * @param {string} [searchfilter] 
         * @param {string} [lastchange] 
         * @param {string} [rawfilter] 
         * @param {string} [rawsort] 
         * @param {boolean} [removenullvalues] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WeatherHistoryGet(pagenumber?: number, pagesize?: number, language?: string, idlist?: string, locfilter?: string, datefrom?: string, dateto?: string, seed?: string, latitude?: string, longitude?: string, radius?: string, fields?: Array<string>, searchfilter?: string, lastchange?: string, rawfilter?: string, rawsort?: string, removenullvalues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Weather>>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).v1WeatherHistoryGet(pagenumber, pagesize, language, idlist, locfilter, datefrom, dateto, seed, latitude, longitude, radius, fields, searchfilter, lastchange, rawfilter, rawsort, removenullvalues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Measuringpoint LIST
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Gastronomy IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; (No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] Area ID (multiple IDs possible, separated by \&quot;,\&quot;)
         * @param {string} [skiareafilter] Skiarea ID
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [source] 
         * @param {boolean} [active] Active Filter (possible Values: &#x27;true&#x27; only Active Measuringpoints, &#x27;false&#x27; only Disabled Measuringpoints), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODH Active Filter Measuringpoints Filter (possible Values: &#x27;true&#x27; only published Measuringpoints, &#x27;false&#x27; only not published Measuringpoints), (default:&#x27;null&#x27;)
         * @param {string} [publishedon] Published On Filter (Separator &#x27;,&#x27; List of publisher IDs), (default:&#x27;null&#x27;)
         * @param {string} [updatefrom] Returns data changed after this date Format (yyyy-MM-dd), (default: &#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter FLOAT Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [longitude] GeoFilter FLOAT Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [radius] Radius INTEGER to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#searchfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki searchfilter&lt;/a&gt;
         * @param {string} [rawfilter] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawfilter&lt;/a&gt;
         * @param {string} [rawsort] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawsort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawsort&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WeatherMeasuringpointGet(pagenumber?: number, pagesize?: number, idlist?: string, locfilter?: string, areafilter?: string, skiareafilter?: string, language?: string, source?: string, active?: boolean, odhactive?: boolean, publishedon?: string, updatefrom?: string, latitude?: string, longitude?: string, radius?: string, seed?: string, fields?: Array<string>, searchfilter?: string, rawfilter?: string, rawsort?: string, removenullvalues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Measuringpoint>>>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).v1WeatherMeasuringpointGet(pagenumber, pagesize, idlist, locfilter, areafilter, skiareafilter, language, source, active, odhactive, publishedon, updatefrom, latitude, longitude, radius, seed, fields, searchfilter, rawfilter, rawsort, removenullvalues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Current Realtime Weather LIVE
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [language] Language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WeatherRealtimeGet(pagenumber?: number, pagesize?: number, language?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<WeatherRealTime>>>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).v1WeatherRealtimeGet(pagenumber, pagesize, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Snowreport Data LIVE
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [skiareaid] Skiarea ID
         * @param {string} [lang] Language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WeatherSnowReportGet(pagenumber?: number, pagesize?: number, skiareaid?: string, lang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SnowReportBaseData>>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).v1WeatherSnowReportGet(pagenumber, pagesize, skiareaid, lang, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WeatherApi - factory interface
 * @export
 */
export const WeatherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary GET Measuringpoint SINGLE
         * @param {string} id Measuringpoint ID
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleMeasuringpoint(id: string, language?: string, fields?: Array<string>, removenullvalues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Measuringpoint>> {
            return WeatherApiFp(configuration).singleMeasuringpoint(id, language, fields, removenullvalues, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Snowreport Data LIVE Single
         * @param {string} id Skiarea ID
         * @param {string} [lang] Language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleSnowReport(id: string, lang?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SnowReportBaseData>> {
            return WeatherApiFp(configuration).singleSnowReport(id, lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Current Suedtirol Weather LIVE Single
         * @param {string} id ID
         * @param {string} [language] Language
         * @param {string} [source] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleWeather(id: string, language?: string, source?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Weather>> {
            return WeatherApiFp(configuration).singleWeather(id, language, source, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET District Weather LIVE
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [locfilter] Locfilter (possible values: filter by District 1 &#x3D; Etschtal/Überetsch/Unterland, 2 &#x3D; Burggrafenamt, 3 &#x3D; Vinschgau, 4 &#x3D; Eisacktal und Sarntal, 5 &#x3D; Wipptal, 6 &#x3D; Pustertal/Dolomiten, 7 &#x3D; Ladinien-Dolomiten | filter nearest DistrictWeather to Region,TV,Municipality,Fraction reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction))
         * @param {string} [language] Language
         * @param {string} [source] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleWeatherDistrict(pagenumber?: number, pagesize?: number, locfilter?: string, language?: string, source?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<BezirksWeather>> {
            return WeatherApiFp(configuration).singleWeatherDistrict(pagenumber, pagesize, locfilter, language, source, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Suedtirol Weather HISTORY SINGLE
         * @param {string} id ID
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleWeatherHistory(id: string, language?: string, fields?: Array<string>, removenullvalues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Measuringpoint>> {
            return WeatherApiFp(configuration).singleWeatherHistory(id, language, fields, removenullvalues, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Current Realtime Weather LIVE Single
         * @param {string} id id
         * @param {string} [language] Language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleWeatherRealtime(id: string, language?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<WeatherRealTime>>> {
            return WeatherApiFp(configuration).singleWeatherRealtime(id, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET District Weather LIVE SINGLE
         * @param {string} id ID
         * @param {string} [language] Language
         * @param {string} [source] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WeatherDistrictIdGet(id: string, language?: string, source?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<BezirksWeather>> {
            return WeatherApiFp(configuration).v1WeatherDistrictIdGet(id, language, source, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Current Suedtirol Weather LIVE
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [language] Language
         * @param {string} [locfilter] Locfilter (possible values: filter by StationData 1 &#x3D; Schlanders, 2 &#x3D; Meran, 3 &#x3D; Bozen, 4 &#x3D; Sterzing, 5 &#x3D; Brixen, 6 &#x3D; Bruneck | filter nearest Station to Region,TV,Municipality,Fraction reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;&#x27; &#x3D; No Filter). IF a Locfilter is set, only Stationdata is provided.
         * @param {boolean} [extended] 
         * @param {string} [source] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WeatherGet(pagenumber?: number, pagesize?: number, language?: string, locfilter?: string, extended?: boolean, source?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Weather>> {
            return WeatherApiFp(configuration).v1WeatherGet(pagenumber, pagesize, language, locfilter, extended, source, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Suedtirol Weather HISTORY
         * @param {number} [pagenumber] Pagenumber
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [language] Language
         * @param {string} [idlist] 
         * @param {string} [locfilter] 
         * @param {string} [datefrom] 
         * @param {string} [dateto] 
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] 
         * @param {string} [longitude] 
         * @param {string} [radius] 
         * @param {Array<string>} [fields] 
         * @param {string} [searchfilter] 
         * @param {string} [lastchange] 
         * @param {string} [rawfilter] 
         * @param {string} [rawsort] 
         * @param {boolean} [removenullvalues] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WeatherHistoryGet(pagenumber?: number, pagesize?: number, language?: string, idlist?: string, locfilter?: string, datefrom?: string, dateto?: string, seed?: string, latitude?: string, longitude?: string, radius?: string, fields?: Array<string>, searchfilter?: string, lastchange?: string, rawfilter?: string, rawsort?: string, removenullvalues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Weather>> {
            return WeatherApiFp(configuration).v1WeatherHistoryGet(pagenumber, pagesize, language, idlist, locfilter, datefrom, dateto, seed, latitude, longitude, radius, fields, searchfilter, lastchange, rawfilter, rawsort, removenullvalues, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Measuringpoint LIST
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Gastronomy IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; (No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] Area ID (multiple IDs possible, separated by \&quot;,\&quot;)
         * @param {string} [skiareafilter] Skiarea ID
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [source] 
         * @param {boolean} [active] Active Filter (possible Values: &#x27;true&#x27; only Active Measuringpoints, &#x27;false&#x27; only Disabled Measuringpoints), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODH Active Filter Measuringpoints Filter (possible Values: &#x27;true&#x27; only published Measuringpoints, &#x27;false&#x27; only not published Measuringpoints), (default:&#x27;null&#x27;)
         * @param {string} [publishedon] Published On Filter (Separator &#x27;,&#x27; List of publisher IDs), (default:&#x27;null&#x27;)
         * @param {string} [updatefrom] Returns data changed after this date Format (yyyy-MM-dd), (default: &#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter FLOAT Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [longitude] GeoFilter FLOAT Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [radius] Radius INTEGER to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
         * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#searchfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki searchfilter&lt;/a&gt;
         * @param {string} [rawfilter] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawfilter&lt;/a&gt;
         * @param {string} [rawsort] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawsort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawsort&lt;/a&gt;
         * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WeatherMeasuringpointGet(pagenumber?: number, pagesize?: number, idlist?: string, locfilter?: string, areafilter?: string, skiareafilter?: string, language?: string, source?: string, active?: boolean, odhactive?: boolean, publishedon?: string, updatefrom?: string, latitude?: string, longitude?: string, radius?: string, seed?: string, fields?: Array<string>, searchfilter?: string, rawfilter?: string, rawsort?: string, removenullvalues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Measuringpoint>>> {
            return WeatherApiFp(configuration).v1WeatherMeasuringpointGet(pagenumber, pagesize, idlist, locfilter, areafilter, skiareafilter, language, source, active, odhactive, publishedon, updatefrom, latitude, longitude, radius, seed, fields, searchfilter, rawfilter, rawsort, removenullvalues, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Current Realtime Weather LIVE
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [language] Language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WeatherRealtimeGet(pagenumber?: number, pagesize?: number, language?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<WeatherRealTime>>> {
            return WeatherApiFp(configuration).v1WeatherRealtimeGet(pagenumber, pagesize, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Snowreport Data LIVE
         * @param {number} [pagenumber] 
         * @param {number} [pagesize] 
         * @param {string} [skiareaid] Skiarea ID
         * @param {string} [lang] Language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WeatherSnowReportGet(pagenumber?: number, pagesize?: number, skiareaid?: string, lang?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SnowReportBaseData>> {
            return WeatherApiFp(configuration).v1WeatherSnowReportGet(pagenumber, pagesize, skiareaid, lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WeatherApi - object-oriented interface
 * @export
 * @class WeatherApi
 * @extends {BaseAPI}
 */
export class WeatherApi extends BaseAPI {
    /**
     * 
     * @summary GET Measuringpoint SINGLE
     * @param {string} id Measuringpoint ID
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
     * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public async singleMeasuringpoint(id: string, language?: string, fields?: Array<string>, removenullvalues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Measuringpoint>> {
        return WeatherApiFp(this.configuration).singleMeasuringpoint(id, language, fields, removenullvalues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Snowreport Data LIVE Single
     * @param {string} id Skiarea ID
     * @param {string} [lang] Language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public async singleSnowReport(id: string, lang?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SnowReportBaseData>> {
        return WeatherApiFp(this.configuration).singleSnowReport(id, lang, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Current Suedtirol Weather LIVE Single
     * @param {string} id ID
     * @param {string} [language] Language
     * @param {string} [source] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public async singleWeather(id: string, language?: string, source?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Weather>> {
        return WeatherApiFp(this.configuration).singleWeather(id, language, source, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET District Weather LIVE
     * @param {number} [pagenumber] 
     * @param {number} [pagesize] 
     * @param {string} [locfilter] Locfilter (possible values: filter by District 1 &#x3D; Etschtal/Überetsch/Unterland, 2 &#x3D; Burggrafenamt, 3 &#x3D; Vinschgau, 4 &#x3D; Eisacktal und Sarntal, 5 &#x3D; Wipptal, 6 &#x3D; Pustertal/Dolomiten, 7 &#x3D; Ladinien-Dolomiten | filter nearest DistrictWeather to Region,TV,Municipality,Fraction reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction))
     * @param {string} [language] Language
     * @param {string} [source] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public async singleWeatherDistrict(pagenumber?: number, pagesize?: number, locfilter?: string, language?: string, source?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<BezirksWeather>> {
        return WeatherApiFp(this.configuration).singleWeatherDistrict(pagenumber, pagesize, locfilter, language, source, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Suedtirol Weather HISTORY SINGLE
     * @param {string} id ID
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
     * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public async singleWeatherHistory(id: string, language?: string, fields?: Array<string>, removenullvalues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Measuringpoint>> {
        return WeatherApiFp(this.configuration).singleWeatherHistory(id, language, fields, removenullvalues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Current Realtime Weather LIVE Single
     * @param {string} id id
     * @param {string} [language] Language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public async singleWeatherRealtime(id: string, language?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<WeatherRealTime>>> {
        return WeatherApiFp(this.configuration).singleWeatherRealtime(id, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET District Weather LIVE SINGLE
     * @param {string} id ID
     * @param {string} [language] Language
     * @param {string} [source] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public async v1WeatherDistrictIdGet(id: string, language?: string, source?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<BezirksWeather>> {
        return WeatherApiFp(this.configuration).v1WeatherDistrictIdGet(id, language, source, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Current Suedtirol Weather LIVE
     * @param {number} [pagenumber] 
     * @param {number} [pagesize] 
     * @param {string} [language] Language
     * @param {string} [locfilter] Locfilter (possible values: filter by StationData 1 &#x3D; Schlanders, 2 &#x3D; Meran, 3 &#x3D; Bozen, 4 &#x3D; Sterzing, 5 &#x3D; Brixen, 6 &#x3D; Bruneck | filter nearest Station to Region,TV,Municipality,Fraction reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;&#x27; &#x3D; No Filter). IF a Locfilter is set, only Stationdata is provided.
     * @param {boolean} [extended] 
     * @param {string} [source] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public async v1WeatherGet(pagenumber?: number, pagesize?: number, language?: string, locfilter?: string, extended?: boolean, source?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Weather>> {
        return WeatherApiFp(this.configuration).v1WeatherGet(pagenumber, pagesize, language, locfilter, extended, source, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Suedtirol Weather HISTORY
     * @param {number} [pagenumber] Pagenumber
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [language] Language
     * @param {string} [idlist] 
     * @param {string} [locfilter] 
     * @param {string} [datefrom] 
     * @param {string} [dateto] 
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] 
     * @param {string} [longitude] 
     * @param {string} [radius] 
     * @param {Array<string>} [fields] 
     * @param {string} [searchfilter] 
     * @param {string} [lastchange] 
     * @param {string} [rawfilter] 
     * @param {string} [rawsort] 
     * @param {boolean} [removenullvalues] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public async v1WeatherHistoryGet(pagenumber?: number, pagesize?: number, language?: string, idlist?: string, locfilter?: string, datefrom?: string, dateto?: string, seed?: string, latitude?: string, longitude?: string, radius?: string, fields?: Array<string>, searchfilter?: string, lastchange?: string, rawfilter?: string, rawsort?: string, removenullvalues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Weather>> {
        return WeatherApiFp(this.configuration).v1WeatherHistoryGet(pagenumber, pagesize, language, idlist, locfilter, datefrom, dateto, seed, latitude, longitude, radius, fields, searchfilter, lastchange, rawfilter, rawsort, removenullvalues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Measuringpoint LIST
     * @param {number} [pagenumber] 
     * @param {number} [pagesize] 
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Gastronomy IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; (No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] Area ID (multiple IDs possible, separated by \&quot;,\&quot;)
     * @param {string} [skiareafilter] Skiarea ID
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [source] 
     * @param {boolean} [active] Active Filter (possible Values: &#x27;true&#x27; only Active Measuringpoints, &#x27;false&#x27; only Disabled Measuringpoints), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active Filter Measuringpoints Filter (possible Values: &#x27;true&#x27; only published Measuringpoints, &#x27;false&#x27; only not published Measuringpoints), (default:&#x27;null&#x27;)
     * @param {string} [publishedon] Published On Filter (Separator &#x27;,&#x27; List of publisher IDs), (default:&#x27;null&#x27;)
     * @param {string} [updatefrom] Returns data changed after this date Format (yyyy-MM-dd), (default: &#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter FLOAT Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
     * @param {string} [longitude] GeoFilter FLOAT Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
     * @param {string} [radius] Radius INTEGER to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki geosort&lt;/a&gt;
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {Array<string>} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname (default:&#x27;null&#x27; all fields are displayed). &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#fields\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki fields&lt;/a&gt;
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null) &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters%2C-fields%2C-language%2C-searchfilter%2C-removenullvalues%2C-updatefrom#searchfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki searchfilter&lt;/a&gt;
     * @param {string} [rawfilter] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawfilter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawfilter&lt;/a&gt;
     * @param {string} [rawsort] &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Using-rawfilter-and-rawsort-on-the-Tourism-Api#rawsort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Wiki rawsort&lt;/a&gt;
     * @param {boolean} [removenullvalues] Remove all Null values from json output. Useful for reducing json size. By default set to false. Documentation on &lt;a href&#x3D;\&quot;https://github.com/noi-techpark/odh-docs/wiki/Common-parameters,-fields,-language,-searchfilter,-removenullvalues,-updatefrom#removenullvalues\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Opendatahub Wiki&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public async v1WeatherMeasuringpointGet(pagenumber?: number, pagesize?: number, idlist?: string, locfilter?: string, areafilter?: string, skiareafilter?: string, language?: string, source?: string, active?: boolean, odhactive?: boolean, publishedon?: string, updatefrom?: string, latitude?: string, longitude?: string, radius?: string, seed?: string, fields?: Array<string>, searchfilter?: string, rawfilter?: string, rawsort?: string, removenullvalues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Measuringpoint>>> {
        return WeatherApiFp(this.configuration).v1WeatherMeasuringpointGet(pagenumber, pagesize, idlist, locfilter, areafilter, skiareafilter, language, source, active, odhactive, publishedon, updatefrom, latitude, longitude, radius, seed, fields, searchfilter, rawfilter, rawsort, removenullvalues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Current Realtime Weather LIVE
     * @param {number} [pagenumber] 
     * @param {number} [pagesize] 
     * @param {string} [language] Language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public async v1WeatherRealtimeGet(pagenumber?: number, pagesize?: number, language?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<WeatherRealTime>>> {
        return WeatherApiFp(this.configuration).v1WeatherRealtimeGet(pagenumber, pagesize, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Snowreport Data LIVE
     * @param {number} [pagenumber] 
     * @param {number} [pagesize] 
     * @param {string} [skiareaid] Skiarea ID
     * @param {string} [lang] Language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public async v1WeatherSnowReportGet(pagenumber?: number, pagesize?: number, skiareaid?: string, lang?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SnowReportBaseData>> {
        return WeatherApiFp(this.configuration).v1WeatherSnowReportGet(pagenumber, pagesize, skiareaid, lang, options).then((request) => request(this.axios, this.basePath));
    }
}
